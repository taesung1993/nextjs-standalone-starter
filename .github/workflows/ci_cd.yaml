name: build-image

on:
  push:
    branches: [main]

env:
  ECR_REPOSITORY: nextjs-standalone-starter
  TASK_DEFINITION: nextjs-standalone-starter-td
  CONTAINER_NAME: nextjs-standalone-starter-container
  ECS_SERVICE: nextjs-standalone-starter-service
  ECS_CLUSTER: nextjs-standalone-starter
  ECS_APPSPEC: appspec.yml
  ECS_APP: AppECS-nextjs-standalone-starter-nextjs-standalone-starter-service
  ECS_DG: DgpECS-nextjs-standalone-starter-nextjs-standalone-starter-service
  ECR_REGISTRY: 448049808269.dkr.ecr.ap-northeast-2.amazonaws.com/nextjs-standalone-starter
  IMAGE_TAG: latest

jobs:
  build-nextjs:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [20.11.x]

    steps:
      - name: git clone
        uses: actions/checkout@v3

      - name: Setup node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}

      - name: get-npm-version
        id: package-version
        uses: martinbeentjes/npm-get-version-action@v1.3.1

      - name: Install pnpm
        run: npm install -g pnpm

      - name: Install dependency
        run: pnpm install

      - name: Disable Next.js Telemetry
        run: pnpm next telemetry disable

      - name: Build Project
        run: pnpm build

      - name: Configure AWS credentitals
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        id: docker_build
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          file: ./dockerfile
          tags: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          provenance: false

      - name: Retrieve the image name
        id: build-image
        run: |
          echo "::set-output name=image::$ECR_REGISTRY:$IMAGE_TAG"

      - name: Sync static files with S3
        env:
          MAX_AGE: ${{ vars.CACHE_CONTROL_MAX_AGE }}
        run: aws s3 sync .next/static s3://${{ vars.S3_BUCKET }}/${{ steps.package-version.outputs.current-version }}/_next/static --cache-control max-age=$MAX_AGE,public,immutable

      - name: Download task definition
        run: |
          aws ecs describe-task-definition \
            --task-definition ${{ env.TASK_DEFINITION }} \
            --query 'taskDefinition' \
            > task-definition.json

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ steps.build-image.outputs.image }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v2
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true
          codedeploy-appspec: ${{ env.ECS_APPSPEC }}
          codedeploy-application: ${{ env.ECS_APP }}
          codedeploy-deployment-group: ${{ env.ECS_DG }}
